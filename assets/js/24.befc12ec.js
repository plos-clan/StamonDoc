(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{311:function(t,e,i){"use strict";i.r(e);var l=i(14),a=Object(l.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"coolpot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#coolpot"}},[t._v("#")]),t._v(" CoolPot")]),t._v(" "),e("p",[t._v("A stamon program language compile implements. by XIAOYI12")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"about-role"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#about-role"}},[t._v("#")]),t._v(" About Role")]),t._v(" "),e("ul",[e("li",[t._v("Used to compile Stamon scripts into bytecode files in advance to improve the running speed.")]),t._v(" "),e("li",[t._v("Default compilation mode supports basic optimizations.")]),t._v(" "),e("li",[t._v("Some O2-level code optimizations are supported.")])]),t._v(" "),e("h2",{attrs:{id:"runtime"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[t._v("#")]),t._v(" Runtime")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Warn")]),t._v(" "),e("p",[t._v("The built-in runtime part of CoolPot is only for compiling and debugging compiler bugs, and the supported libraries are extremely limited, so we strongly do not recommend you to use the built-in runtime for production use.")])]),t._v(" "),e("h2",{attrs:{id:"level-2-optimize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#level-2-optimize"}},[t._v("#")]),t._v(" Level-2 optimize")]),t._v(" "),e("ul",[e("li",[t._v("CoolPot's level-2 optimization mode may break some of the original logic of the script to achieve the fastest execution speed (but not seriously affect the business logic).")]),t._v(" "),e("li",[t._v("Level-2 optimization will perform various code statistics, as well as culling and inline operations, which will slow down the compilation speed.")])]),t._v(" "),e("blockquote",[e("p",[t._v("Don't compare CoolPot's Level-2 optimization level with that of other compilers such as GCC,"),e("br"),t._v("\nas the Stamon language has different syntax and low-level implementations than other languages such as C/C++")])]),t._v(" "),e("p",[t._v("The following are the entries for level-2 optimizations.")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("speed")]),t._v(" Increase the speed of execution."),e("br"),t._v(" "),e("code",[t._v("size")]),t._v(" Reduce target file size.")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("ID")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Description")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Role")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--inline.function")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("inline method(Methods with fewer calls or a small amount of code are more likely to be inlined)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("speed")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--inline.if")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("inline if statement(When the const expression is set to 'true', the if statement block is automatically expanded)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("speed")]),t._v(","),e("code",[t._v("size")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--inline.value")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("inline value(Variables that do not have a reassignment are automatically inlined into expressions or statements.)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("speed")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--const.expressions.eval")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Const expressions take the value (a pure value expression with no variables will automatically calculate a single value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("speed")]),t._v(","),e("code",[t._v("size")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--invalid.value.del")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Unused variables are automatically eliminated")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("size")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--invalid.code.del")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Invalid code culling ('continue' statement at the end of the loop, and null operation instructions in bytecode)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("size")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("--unreach.statements.del")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Culling unreachable statements")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("size")])])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);